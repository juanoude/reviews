/* O elemento pai (container que deve ser definido como um elemento
flex - ele será a caixa flexível) */
.header .container-dentro-header {
  display: flex;
  align-items: center; /*alinha eles verticalmente como um "vertical-align: middle;"*/
  justify-content: space-between; /* Para justificar o conteúdo distribuindo o
  empaço em branco entre um elemento e outro. */
}

.nav {
  display: flex; /* Só de colocar no flex ele alinhou os elemento na mesma
  linha como um "inline-block" */
}

/* Colocando o footer com dois elementos filhos em sincronia - um form de
pesquisar e uma ul com logos de patrocinadores */
.footer .container {
  display: flex;
  justify-content: space-between;
}

.footer-logos {
  display: flex;
  align-items: center;
  justify-content: space-around; /* Ele distrubui o espaço em branco ao redor
  de cada elemento */
  width: 75%;
}

.footer-pesquisar {
  width: 25%;
}

/* Colocando flex no pai do campo e do botão, deixa os dois no mesmo heigth*/
.footer-fielset {
  display: flex;
}


/* para deixar elementos alinhados verticalmente porém com cada bloco ao lado
do outro se faz: */
.elemento-pai {
  display: flex;
  flex-direction: column; /* Isso deixa o flex na vertical */
  flex-wrap: wrap; /* Naturalmente o flex estrapola o tamanho limitante do
  elemento pai, com o wrap ele respeita e flui de acordo com seu tamanho. */
  height: 250px; /* Como cada elemento tem essa altura, deixaremos o pai como
  limitador de fluxo */

  /* Um atalho para as funções flex-direction: column; e flex-wrap: wrap; */
  flex-flow: column wrap
}


/* Dada uma lista de cursos com imagens e nomes em uma ul, para ordená-los: */
.conteudo-principal-cursos {
  display: flex;
  flex-wrap: wrap;
}

/* Quando se dispõe elementos em grid, o justify content nos últimos elementos
fica esquisito. Portanto tem que fechar a conta com margens e tamanhos. */
.conteudoPrincipal-cursos-elementos {
  width: 23%;
  margin: 1%;
}

/* Para retirar a margem do primeiro e ultimo elemento de cada linha: */
.conteudoPrincipal-cursos-elementos: nth-child(4n) {
  margin-right: 0;
}

/* Funciona até no primeiro elemento, pois ao interpretar o n o computador tenta
todos os valores, inclusive o 0. */
.conteudoPrincipal-cursos-elementos: nth-child(4n + 1) {
  margin-left: 0;
}


/* Depois de 768 px é interessante que a aparência deixe de ser a do Tablet e
volte a ser a de Desktop. Normalmente o que altera do desktop para o mobile é
o flex-diretion e o width dos elementos. */
@media(max-width: 768px) {
  /* Quando trocamos o flex-direction o align-items e justify-content trocam seu
  eixo */
  .nav-principal-mobile {
    flex-direction:column;
    align-items: initial;
    /* Quando se coloca align-items: center; as linhas do menu fica na mesma
    largura do título, portanto usando apenas o text-align: center deixa os
    elementos mais largos e os items do menu centralizados. */
    text-align: center;
  }

  .conteudoPrincipal-cursos-mobile{
    display: flex;
    flex-direction: column;
  }

  .conteudoPrincipal-cursos-mobile-items {
    width:100%;
  }

  .rodape-Principal-lista {
    height: auto;
  }

  .footer-container {
    flex-direction: column;
    align-items: center;
  }

  .footer-logos {
    margin: 0;
    width: 100%;
  }

  .footer-form {
    width: 100%;
  }

  .footer-fieldset {
    justify-content: center;
  }
}


/* O elemento order decide a ordem dos elementos flex, sem precisar mudar o
html, por padrão todos elementos são order = 0 */
.elemento-filho {
  order: -1; /* o valor menor aparece primeiro */
}


/* O elemento flex-grow pega o espaço vazio e estica a caixa do elemento incorporando-o.
Em outras palavras ele espande a caixa de modo a cobrir o espaço vazio. Caso tenha dois
elementos com flex-grow ele divide o espaço de acordo com a soma dos valores e distrubui
proporcionalmente */
.elemento-filho {
  flex-grow: 2;
}
/* Nesse caso ele dividiria o espaço em 5 partes dando 2 ao filho acima e 3 ao filho
abaixo */
.outro-filho {
  flex-grow: 3;
}
